_id: spc_e2022c806fd440ce81b1970ba9ab2fe1
type: ApiSpec
parentId: wrk_0f2916a715b04bf6af710f690f2815de
modified: 1604418178552
created: 1603370017875
fileName: mobios school
contents: >-
  swagger: "2.0"

  info:
    description: "REST API for education portal [http://mobios.school]([http://mobios.school)"
    version: "1.0.0"
    title: "Mobios School"
    contact:
      name: "Mobios Studio"
      url: "https://mobios.ua"
      email: "pm.mobios@gmail.com"
  host: mobios.school

  basePath: "/api"

  tags:

  - name: "courses"
    description: "About courses"
  - name: "plans"
    description: "About courses plans"
  - name: "chars"
    description: "About plans characteristics"
  - name: "auth"
    description: "About users authentication"
  schemes:

  - https

  - http

  paths:
    /courses/get/all:
      get:
        tags:
        - "courses"
        summary: "Получить все курсы"
        description: "Запрос на получение всех курсов. Возвращает массив всех опубликованных курсов в объекте `courses`."
        operationId: "getAllCourses"
        produces:
        - "application/json"
        responses:
          "200":
            description: "Успешно, возваращает массив объектов `courses` с опубликованными курсами"
            schema:
              type: "object"
              properties:
                status:
                  type: "string"
                  example: "success"
                message:
                  type: "string"
                  example: "OK"
                courses:
                  type: "array"
                  items:
                    $ref: "#/definitions/Course"
          "400":
            description: "Ошибка, данные не найдены"
            schema:
              $ref: "#/definitions/Answer400"
    /courses/get/{course}:
      get:
        tags:
        - "courses"
        summary: "Получить курс по его id или slug"
        description: "Запрос на получение курса. В `{course}` нужно передавать `id` или `slug` курса который хотим получить. Возвращает объект курса `course`."
        operationId: "getCourse"
        parameters:
        - name: course
          in: path
          type: "string"
          required: true
        produces:
        - "application/json"
        responses:
          "200":
            description: "Успешно, возвращает объект курса `course`."
            schema:
              properties:
                status:
                  type: "string"
                  example: "success"
                message:
                  type: "string"
                course:
                  $ref: "#/definitions/Course"
          "400":
            description: "Ошибка, данные не найдены."
            schema:
              $ref: "#/definitions/Answer400"
    /courses/{course}/plans/get/all:
      get:
        tags:
        - "plans"
        summary: "Получить все пакеты курса"
        description: "Запрос на получение пакетов конкретного курса. В `{course}` нужно передавать `id` или `slug` курса для которого хотим получить пакеты. Возвращает массив `plans` с пакетами этого курса."
        operationId: "getAllPlans"
        parameters:
          - name: course
            in: path
            type: "string"
            required: true
        produces:
        - "application/json"
        responses:
          "200":
            description: "Успешно, возвращается массив объектов `plans` с пакетами данного курса."
            schema:
              type: "object"
              properties:
                status:
                  type: "string"
                  example: "success"
                message:
                  type: "string"
                  example: "OK"
                plans:
                  type: "array"
                  items:
                    $ref: "#/definitions/Plan"
          "400":
            description: "Ошибка, данные не найдены."
            schema:
              $ref: "#/definitions/Answer400"
    /courses/plans/get/{id}:
      get:
        tags:
        - "plans"
        summary: "Получить пакет по его {id}"
        description: "Запрос на получение конкретного пакета по его `id`. В запрос нужно передавать `{id}` пакета который нужно получить. Возвращает объект пакета `plan`."
        operationId: "getPlan"
        parameters:
          - name: id
            in: path
            type: "integer"
            required: true
        produces:
        - "application/json"
        responses:
          "200":
            description: "Успешно, возвращает объект пакета `plan`."
            schema:
              properties:
                status:
                  type: "string"
                  example: "success"
                message:
                  type: "string"
                plan:
                  $ref: "#/definitions/Plan"
          "400":
            description: "Ошибка, данные не найдены."
            schema:
              $ref: "#/definitions/Answer400"
    /courses/{course}/plans/chars/get:
      get:
        tags:
        - "chars"
        summary: "Получить список характеристик курса по его {id}"
        description: "Запрос на характеристик курса по его `id`. В запрос нужно передавать `{id}` курса характеристики которого нужно получить. Возвращает массив `chars`."
        operationId: "getCourseChars"
        parameters:
          - name: id
            in: path
            type: "integer"
            required: true
        produces:
        - "application/json"
        responses:
          "200":
            description: "Успешно, возвращает массив характеристик `chars`."
            schema:
              properties:
                status:
                  type: "string"
                  example: "success"
                message:
                  type: "string"
                chars:
                  type: "array"
                  items:
                    $ref: "#/definitions/Char"
          "400":
            description: "Ошибка, данные не найдены."
            schema:
              $ref: "#/definitions/Answer400"
    /courses/register:
      post:
        tags:
        - "courses"
        summary: "Записаться на курс"
        description: "Запрос на запись пользователя на курс. Передается JSON."
        operationId: "courseRegister"
        consumes:
          - application/json
        parameters:
          - in: body
            name: register
            description: "Запись на курс"
            schema:
              type: object
              required:
                - courseId
                - planId
                - name
                - email
                - phone
              properties:
                courseId:
                  type: "integer"
                  example: 10
                planId:
                  type: "integer"
                  example: 5
                name:
                  type: "string"
                  example: "Ivan Ivanov"
                email:
                  type: "string"
                  example: "ivan@gmail.com"
                phone:
                  type: "string"
                  example: "+380995639404"
        produces:
        - "application/json"
        responses:
          "200":
            description: "Успешно, возвращает сообщение `message`"
            schema:
              properties:
                status:
                  type: "string"
                  example: "success"
                message:
                  type: "string"
                  example: "Вы успешно записались на курс!"
                payment:
                  type: "object"
                  $ref: "#/definitions/Payment"
          "400":
            description: "Ошибка, данные не валидны, не получилось записаться на курс"
            schema:
              properties:
                status:
                  type: "string"
                  example: "failed"
                message:
                  type: "string"
                  example: "Поле email не заполнено!"
    /auth/user:
      get:
        tags:
        - "auth"
        summary: "Получить данные пользователя"
        description: "Запрос на получение объекта пользователя."
        operationId: "getUser"
        consumes:
          - application/json
        parameters:
          - in: body
            name: auth
            description: "Токен пользователя"
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: "string"
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9uYXN2aXRsby5tb2Jpb3Mud29ya1wvYXBpXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNDQxMTUwMCwiZXhwIjoxNjA1NjIxMTAwLCJuYmYiOjE2MDQ0MTE1MDAsImp0aSI6IjVWRk5PRjBRb1RCdTBMeFoiLCJzdWIiOjExNCwicHJ2IjoiODdlMGFmMWVmOWZkMTU4MTJmZGVjOTcxNTNhMTRlMGIwNDc1NDZhYSJ9.vOyagfgYAZULzzqEOi8_bcMq-Lp8oZd01dq9fSIiNcM"
        produces:
        - "application/json"
        responses:
          "200":
            description: "Успешно, возвращает объект `user`"
            schema:
              properties:
                status:
                  type: "string"
                  example: "success"
                message:
                  type: "string"
                  example: "Пользователь найден!"
                user:
                  type: "object"
                  $ref: "#/definitions/User"
          "400":
            description: "Ошибка, пользователь не найден"
            schema:
              properties:
                status:
                  type: "string"
                  example: "failed"
                message:
                  type: "string"
                  example: "Пользователь не найден!"
    /courses/payment/details/send:
      post:
        tags:
        - "courses"
        summary: "Отправить реквизиты на почту"
        description: "Запрос на отправку реквизитов для оплаты. Передается ключ `email` по которому отсылается письмо на почту пользователя. А так же `courseId` и `planId` для идентификации курса и пакета который нужно оплатить."
        operationId: "sendPaymentDetails"
        consumes:
          - application/json
        parameters:
          - in: body
            name: details
            description: "JSON с информацией о курсе, выбранном пакете и почтой пользователя"
            schema:
              type: object
              required:
                - token
              properties:
                userEmail:
                  type: "string"
                  example: "email@gmail.com"
                courseId:
                  type: "integer"
                  example: 12
                planId:
                  type: "integer"
                  example: 4
        produces:
        - "application/json"
        responses:
          "200":
            description: "Успешно, реквизиты отправлены"
            schema:
              properties:
                status:
                  type: "string"
                  example: "success"
                message:
                  type: "string"
                  example: "Реквизиты отправлены!"
          "400":
            description: "Ошибка, реквизиты не отправлены"
            schema:
              properties:
                status:
                  type: "string"
                  example: "failed"
                message:
                  type: "string"
                  example: "Ошибка"
  definitions:
    Course:
      type: "object"
      properties:
        id:
          type: "integer"
        slug:
          type: "string"
        meta:
          type: "object"
          properties:
            title:
              type: "string"
              example: "Graphic"
            description:
              type: "string"
              example: "Graphic course"
            keywords:
              type: "string"
              example: "keys and words"
          minLength: 0
        startDate:
          type: "string"
          format: "date"
        promotionDate:
          type: "string"
          format: "date"
        price:
          type: "object"
          properties:
            usd:
              type: "integer"
              minimum: 0
            uah:
              type: "integer"
              minimum: 0
            rub:
              type: "integer"
              minimum: 0
        discount:
          type: "integer"
          minimum: 1
          maximum: 100
        places:
          type: "integer"
          minimum: 1
        placesLeft:
          type: "integer"
          minimum: 0
        
        published:
          type: "boolean"
          default: false
        onMainPage:
          type: "boolean"
          default: false
      xml:
        name: "Course"
    Plan:
      type: "object"
      properties:
        id:
          type: "integer"
        title:
          type: "string"
          example: "Group plan"
        price:
          type: "object"
          properties:
            usd:
              type: "integer"
              minimum: 0
              example: 200
            uah:
              type: "integer"
              minimum: 0
              example: 5000
            rub:
              type: "integer"
              minimum: 0
              example: 10000
        priceAfterPromotion:
          type: "object"
          properties:
            usd:
              type: "integer"
              minimum: 0
              example: 300
            uah:
              type: "integer"
              minimum: 0
              example: 7500
            rub:
              type: "integer"
              minimum: 0
              example: 15000
        promotionDate:
          type: "string"
          format: "date"
        duration:
          type: "string"
          example: "3.5 mounth"
        sort:
          type: "integer"
          example: 1 
        chars:
          type: "array"
          items:
            $ref: "#/definitions/Char"
        description:
          type: "string"
          example: "simple plan description"  
    Answer400:
      type: "object"
      properties:
        status:
          type: "string"
          example: "failed"
        message:
          type: "string"
          example: "InvalidArgumentException"
    Char:
      type: "object"
      properties:
        id:
          type: "integer"
        "title":
          type: "sting"
          example: "Доступ к материалам сохранится на 6 месяцев"
        "statuses":
          type: "array"
          items:
            $ref: "#/definitions/Status"
    Status:
      type: "object"
      properties:
        "content":
          type: "string"
          example: "+ 8 онлайн вебинаров с преподавателями курса"
        "active":
          type: "boolean"
          example: true
    Payment:
      type: "object"
      properties:
        "uah":
          type: "object"
          properties:
            merchantAccount:
              type: "string"
              example: "mobios_school"
            merchantDomainName:
              type: "string"
              example: "https://mobios.school"
            merchantSignature:
              type: "string"
              example: "bc52ad1874b32bab17bdff56a5f19924"
            returnUrl:
              type: "string"
              example: "https://mobios.school/api/payment/wayforpay/getres"
            serviceUrl:
              type: "string"
              example: "https://mobios.school/api/payment/wayforpay/getres"
            orderReference: 
              type: "string"
              example: "31b6f30f1cd9e93a1583c13b753c039364e98dd4"
            orderDate:
              type: "string"
              example: "1604411928"
            orderNo: 
              type: "string"
              example: "4083"
            amount:
              type: "string"
              example: "9800"
            currency:
              type: "string"
              example: "UAH"
            productName[]:
              type: "string"
              example: "Оплата курса"
            productPrice[]:
              type: "string"
              example: "9800"
            productCount[]:
              type: "string"
              example: "1"
        "rub":
          type: "object"
          properties:
            merchantAccount:
              type: "string"
              example: "mobios_school"
            merchantDomainName:
              type: "string"
              example: "https://mobios.school"
            merchantSignature:
              type: "string"
              example: "308263c2e7720f169d5b7c82afbceb34"
            returnUrl:
              type: "string"
              example: "https://mobios.school/api/payment/wayforpay/getres"
            serviceUrl:
              type: "string"
              example: "https://mobios.school/api/payment/wayforpay/getres"
            orderReference: 
              type: "string"
              example: "4fd11b8d2d0556f9120966728bca106a9beab239"
            orderDate:
              type: "string"
              example: "1604411928"
            orderNo: 
              type: "string"
              example: "4083"
            amount:
              type: "string"
              example: "28210"
            currency:
              type: "string"
              example: "RUB"
            productName[]:
              type: "string"
              example: "Оплата курса"
            productPrice[]:
              type: "string"
              example: "28210"
            productCount[]:
              type: "string"
              example: "1"
        "usd":
          type: "object"
          properties:
            merchantAccount:
              type: "string"
              example: "mobios_school"
            merchantDomainName:
              type: "string"
              example: "https://mobios.school"
            merchantSignature:
              type: "string"
              example: "2e89ba0d7bef9f42bb8e0b81560d5507"
            returnUrl:
              type: "string"
              example: "https://mobios.school/api/payment/wayforpay/getres"
            serviceUrl:
              type: "string"
              example: "https://mobios.school/api/payment/wayforpay/getres"
            orderReference: 
              type: "string"
              example: "4fd11b8d2d0556f9120966728bca106a9beab239"
            orderDate:
              type: "string"
              example: "1604411928"
            orderNo: 
              type: "string"
              example: "4083"
            amount:
              type: "string"
              example: "114"
            currency:
              type: "string"
              example: "USD"
            productName[]:
              type: "string"
              example: "Оплата курса"
            productPrice[]:
              type: "string"
              example: "114"
            productCount[]:
              type: "string"
              example: "1"
    User:
      type: "object"
      properties:
        "name":
          type: "string"
          example: "Иван Иванович"
        "email":
          type: "string"
          example: "email@gmail.com"
        "phone":
          type: "string"
          example: "+380685331856"
contentType: yaml
